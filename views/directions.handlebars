<!DOCTYPE html>
<html lang="en">

<head>
    <meta charset="UTF-8">
    <meta http-equiv="X-UA-Compatible" content="IE=edge">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <script src='https://api.tiles.mapbox.com/mapbox-gl-js/v2.6.0/mapbox-gl.js'></script>
    <link href='https://api.tiles.mapbox.com/mapbox-gl-js/v2.6.0/mapbox-gl.css' rel='stylesheet' />
    <title>locator</title>
    <style>
        #map {
            position: absolute;
            top: 0;
            bottom: 100px;
            width: 100%;
        }

        .marker {
            background-image: url('/upload/mapbox-icon.png');
            background-size: cover;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            cursor: pointer;
        }
        .motor {
            background-image: url('/upload/motor.jpg');
            background-size: cover;
            width: 50px;
            height: 50px;
            border-radius: 50%;
            cursor: pointer;
        }
        .update{
            position: absolute;
            bottom: 100px;
            width: 100%;
        }
    </style>
</head>

<body>

    <div id='map'></div>
    <div class="update">
        
            <h6>directions to:{{standNo}} {{streetName}}</h6>
            <a href="/complete/{{idno}}">
            <h6>click here to complete the Job</h6>
        </a>
    </div>

    <script>
        mapboxgl.accessToken = 'pk.eyJ1IjoicmVnaW9uYWxkIiwiYSI6ImNrdmt0a29sbDBmMmMyb281NjNzaXVqeGUifQ.2ml1Z3_-h8SkvMJR9YDT0Q'
        const map = new mapboxgl.Map({
            container: 'map',
            style: 'mapbox://styles/mapbox/dark-v10',
            center: [27.954088, -26.195246], // starting position
            zoom: 12
        });

        const bounds = [[27.537, -26.563], [28.542, -25.834]];
        {{!-- map.setMaxBounds(bounds); --}}

        const start = [{{endLong}},{{endLat}}];

        const street = "{{standNo}}" + " " + "{{streetName}}";
        var discript = "{{message}}";

        async function getRoute(end) {

            const route = {{route}};

        const geojson = {
            type: 'Feature',
            properties: {},
            geometry: {
                type: 'LineString',
                coordinates: route
            }
        };

        if (map.getSource('route')) {
            map.getSource('route').setData(geojson);
        }
        else {
            map.addLayer({
                id: 'route',
                type: 'line',
                source: {
                    type: 'geojson',
                    data: geojson
                },
                layout: {
                    'line-join': 'round',
                    'line-cap': 'round'
                },
                paint: {
                    'line-color': '#FFFF00',
                    'line-width': 5,
                    'line-opacity': 0.75
                }
            });
        };

        const el = document.createElement('div');
        el.className = 'marker';
        new mapboxgl.Marker(el).setLngLat(end).setPopup(new mapboxgl.Popup({ offset: 25 }).setHTML(`<h3>${street}</h3><p>${discript}</p>`)).addTo(map);

        const ele = document.createElement('div');
        ele.className = 'motor';
        new mapboxgl.Marker(ele).setLngLat(start).setPopup(new mapboxgl.Popup({ offset: 25 }).setHTML(`<h3>${"Starting point"}</h3><p>${"good luck"}</p>`)).addTo(map);
        console.log(route);
        };

        const end = [{{startLong}},{{startLat}}];

        map.on('load', () => {

            getRoute(end);

            // Add starting point to the map
            map.addLayer({
                id: 'point',
                type: 'circle',
                source: {
                    type: 'geojson',
                    data: {
                        type: 'FeatureCollection',
                        features: [
                            {
                                type: 'Feature',
                                properties: {},
                                geometry: {
                                    type: 'Point',
                                    coordinates: end
                                }
                            }
                        ]
                    }
                },
                paint: {
                    'circle-radius': 15,
                    'circle-color': '#ff0000'
                }
            });
            // this is where the code from the next step will go
        });
    </script>
</body>

</html>